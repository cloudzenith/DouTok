// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: v1/video.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	FeedShortVideo(ctx context.Context, in *FeedShortVideoRequest, opts ...grpc.CallOption) (*FeedShortVideoResponse, error)
	GetVideoById(ctx context.Context, in *GetVideoByIdRequest, opts ...grpc.CallOption) (*GetVideoByIdResponse, error)
	PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error)
	ListPublishedVideo(ctx context.Context, in *ListPublishedVideoRequest, opts ...grpc.CallOption) (*ListPublishedVideoResponse, error)
	// 标记视频已经成功上传
	MarkVideoUploaded(ctx context.Context, in *MarkVideoUploadedRequest, opts ...grpc.CallOption) (*MarkVideoUploadedResponse, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) FeedShortVideo(ctx context.Context, in *FeedShortVideoRequest, opts ...grpc.CallOption) (*FeedShortVideoResponse, error) {
	out := new(FeedShortVideoResponse)
	err := c.cc.Invoke(ctx, "/shortVideoCoreService.api.v1.VideoService/FeedShortVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoById(ctx context.Context, in *GetVideoByIdRequest, opts ...grpc.CallOption) (*GetVideoByIdResponse, error) {
	out := new(GetVideoByIdResponse)
	err := c.cc.Invoke(ctx, "/shortVideoCoreService.api.v1.VideoService/GetVideoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error) {
	out := new(PublishVideoResponse)
	err := c.cc.Invoke(ctx, "/shortVideoCoreService.api.v1.VideoService/PublishVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) ListPublishedVideo(ctx context.Context, in *ListPublishedVideoRequest, opts ...grpc.CallOption) (*ListPublishedVideoResponse, error) {
	out := new(ListPublishedVideoResponse)
	err := c.cc.Invoke(ctx, "/shortVideoCoreService.api.v1.VideoService/ListPublishedVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) MarkVideoUploaded(ctx context.Context, in *MarkVideoUploadedRequest, opts ...grpc.CallOption) (*MarkVideoUploadedResponse, error) {
	out := new(MarkVideoUploadedResponse)
	err := c.cc.Invoke(ctx, "/shortVideoCoreService.api.v1.VideoService/MarkVideoUploaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	FeedShortVideo(context.Context, *FeedShortVideoRequest) (*FeedShortVideoResponse, error)
	GetVideoById(context.Context, *GetVideoByIdRequest) (*GetVideoByIdResponse, error)
	PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error)
	ListPublishedVideo(context.Context, *ListPublishedVideoRequest) (*ListPublishedVideoResponse, error)
	// 标记视频已经成功上传
	MarkVideoUploaded(context.Context, *MarkVideoUploadedRequest) (*MarkVideoUploadedResponse, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) FeedShortVideo(context.Context, *FeedShortVideoRequest) (*FeedShortVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedShortVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoById(context.Context, *GetVideoByIdRequest) (*GetVideoByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoById not implemented")
}
func (UnimplementedVideoServiceServer) PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServiceServer) ListPublishedVideo(context.Context, *ListPublishedVideoRequest) (*ListPublishedVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublishedVideo not implemented")
}
func (UnimplementedVideoServiceServer) MarkVideoUploaded(context.Context, *MarkVideoUploadedRequest) (*MarkVideoUploadedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkVideoUploaded not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_FeedShortVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedShortVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).FeedShortVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortVideoCoreService.api.v1.VideoService/FeedShortVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).FeedShortVideo(ctx, req.(*FeedShortVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortVideoCoreService.api.v1.VideoService/GetVideoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoById(ctx, req.(*GetVideoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortVideoCoreService.api.v1.VideoService/PublishVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishVideo(ctx, req.(*PublishVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_ListPublishedVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublishedVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).ListPublishedVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortVideoCoreService.api.v1.VideoService/ListPublishedVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).ListPublishedVideo(ctx, req.(*ListPublishedVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_MarkVideoUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkVideoUploadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).MarkVideoUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortVideoCoreService.api.v1.VideoService/MarkVideoUploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).MarkVideoUploaded(ctx, req.(*MarkVideoUploadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortVideoCoreService.api.v1.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeedShortVideo",
			Handler:    _VideoService_FeedShortVideo_Handler,
		},
		{
			MethodName: "GetVideoById",
			Handler:    _VideoService_GetVideoById_Handler,
		},
		{
			MethodName: "PublishVideo",
			Handler:    _VideoService_PublishVideo_Handler,
		},
		{
			MethodName: "ListPublishedVideo",
			Handler:    _VideoService_ListPublishedVideo_Handler,
		},
		{
			MethodName: "MarkVideoUploaded",
			Handler:    _VideoService_MarkVideoUploaded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/video.proto",
}
