// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mock.go -package=accountserviceiface AccountService
//

// Package accountserviceiface is a generated GoMock package.
package accountserviceiface

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// CheckPasswordByEmail mocks base method.
func (m *MockAccountService) CheckPasswordByEmail(ctx context.Context, email, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordByEmail", ctx, email, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPasswordByEmail indicates an expected call of CheckPasswordByEmail.
func (mr *MockAccountServiceMockRecorder) CheckPasswordByEmail(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordByEmail", reflect.TypeOf((*MockAccountService)(nil).CheckPasswordByEmail), ctx, email, password)
}

// CheckPasswordById mocks base method.
func (m *MockAccountService) CheckPasswordById(ctx context.Context, id int64, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordById", ctx, id, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPasswordById indicates an expected call of CheckPasswordById.
func (mr *MockAccountServiceMockRecorder) CheckPasswordById(ctx, id, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordById", reflect.TypeOf((*MockAccountService)(nil).CheckPasswordById), ctx, id, password)
}

// CheckPasswordByMobile mocks base method.
func (m *MockAccountService) CheckPasswordByMobile(ctx context.Context, mobile, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordByMobile", ctx, mobile, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPasswordByMobile indicates an expected call of CheckPasswordByMobile.
func (mr *MockAccountServiceMockRecorder) CheckPasswordByMobile(ctx, mobile, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordByMobile", reflect.TypeOf((*MockAccountService)(nil).CheckPasswordByMobile), ctx, mobile, password)
}

// Create mocks base method.
func (m *MockAccountService) Create(ctx context.Context, mobile, email, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, mobile, email, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountServiceMockRecorder) Create(ctx, mobile, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountService)(nil).Create), ctx, mobile, email, password)
}

// ModifyPassword mocks base method.
func (m *MockAccountService) ModifyPassword(ctx context.Context, id int64, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyPassword", ctx, id, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyPassword indicates an expected call of ModifyPassword.
func (mr *MockAccountServiceMockRecorder) ModifyPassword(ctx, id, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyPassword", reflect.TypeOf((*MockAccountService)(nil).ModifyPassword), ctx, id, oldPassword, newPassword)
}
