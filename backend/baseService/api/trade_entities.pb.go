// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: trade_entities.proto

package api

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 交易单交易类型枚举 表明该笔交易完成了一个怎样的操作
type TradeBizType int32

const (
	TradeBizType_DEFAULT_BT     TradeBizType = 0 // 默认值
	TradeBizType_RECHARGE_BT    TradeBizType = 1 // DouTok币充值
	TradeBizType_MALL_ORDERS_BT TradeBizType = 2 // 商城订单
)

// Enum value maps for TradeBizType.
var (
	TradeBizType_name = map[int32]string{
		0: "DEFAULT_BT",
		1: "RECHARGE_BT",
		2: "MALL_ORDERS_BT",
	}
	TradeBizType_value = map[string]int32{
		"DEFAULT_BT":     0,
		"RECHARGE_BT":    1,
		"MALL_ORDERS_BT": 2,
	}
)

func (x TradeBizType) Enum() *TradeBizType {
	p := new(TradeBizType)
	*p = x
	return p
}

func (x TradeBizType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeBizType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[0].Descriptor()
}

func (TradeBizType) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[0]
}

func (x TradeBizType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeBizType.Descriptor instead.
func (TradeBizType) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{0}
}

// 销售方式
type TradeSaleWay int32

const (
	TradeSaleWay_DEFAULT_SW TradeSaleWay = 0 // 默认值
	TradeSaleWay_DIRECT_SW  TradeSaleWay = 1 // 直接销售
	TradeSaleWay_ADAPTED_SW TradeSaleWay = 2 // 代理销售
)

// Enum value maps for TradeSaleWay.
var (
	TradeSaleWay_name = map[int32]string{
		0: "DEFAULT_SW",
		1: "DIRECT_SW",
		2: "ADAPTED_SW",
	}
	TradeSaleWay_value = map[string]int32{
		"DEFAULT_SW": 0,
		"DIRECT_SW":  1,
		"ADAPTED_SW": 2,
	}
)

func (x TradeSaleWay) Enum() *TradeSaleWay {
	p := new(TradeSaleWay)
	*p = x
	return p
}

func (x TradeSaleWay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSaleWay) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[1].Descriptor()
}

func (TradeSaleWay) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[1]
}

func (x TradeSaleWay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeSaleWay.Descriptor instead.
func (TradeSaleWay) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{1}
}

// 支付顺序
type TradePaySequence int32

const (
	TradePaySequence_PAY_FIRST TradePaySequence = 0 // 先支付
	TradePaySequence_PAY_LAST  TradePaySequence = 1 // 后支付
)

// Enum value maps for TradePaySequence.
var (
	TradePaySequence_name = map[int32]string{
		0: "PAY_FIRST",
		1: "PAY_LAST",
	}
	TradePaySequence_value = map[string]int32{
		"PAY_FIRST": 0,
		"PAY_LAST":  1,
	}
)

func (x TradePaySequence) Enum() *TradePaySequence {
	p := new(TradePaySequence)
	*p = x
	return p
}

func (x TradePaySequence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradePaySequence) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[2].Descriptor()
}

func (TradePaySequence) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[2]
}

func (x TradePaySequence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradePaySequence.Descriptor instead.
func (TradePaySequence) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{2}
}

// 交易对象的商品类型
type TradeGoodsType int32

const (
	TradeGoodsType_DEFAULT_GT TradeGoodsType = 0 // 默认值
	TradeGoodsType_NORMAL_GT  TradeGoodsType = 1 // 普通商品
	TradeGoodsType_VIRTUAL_GT TradeGoodsType = 2 // 虚拟商品
	TradeGoodsType_COUPON_GT  TradeGoodsType = 3 // 优惠券
)

// Enum value maps for TradeGoodsType.
var (
	TradeGoodsType_name = map[int32]string{
		0: "DEFAULT_GT",
		1: "NORMAL_GT",
		2: "VIRTUAL_GT",
		3: "COUPON_GT",
	}
	TradeGoodsType_value = map[string]int32{
		"DEFAULT_GT": 0,
		"NORMAL_GT":  1,
		"VIRTUAL_GT": 2,
		"COUPON_GT":  3,
	}
)

func (x TradeGoodsType) Enum() *TradeGoodsType {
	p := new(TradeGoodsType)
	*p = x
	return p
}

func (x TradeGoodsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeGoodsType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[3].Descriptor()
}

func (TradeGoodsType) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[3]
}

func (x TradeGoodsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeGoodsType.Descriptor instead.
func (TradeGoodsType) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{3}
}

type TradeOrderStatusEnum int32

const (
	TradeOrderStatusEnum_CREATE            TradeOrderStatusEnum = 0 // 已创建
	TradeOrderStatusEnum_PAY               TradeOrderStatusEnum = 1 // 已支付
	TradeOrderStatusEnum_DELIVERY_STARTED  TradeOrderStatusEnum = 2 // 开始交付
	TradeOrderStatusEnum_DELIVERY_FINISHED TradeOrderStatusEnum = 3 // 交付完成
	TradeOrderStatusEnum_CLOSED            TradeOrderStatusEnum = 4 // 已关闭
	TradeOrderStatusEnum_SUCCESS           TradeOrderStatusEnum = 5 // 交易成功
	TradeOrderStatusEnum_FAIL              TradeOrderStatusEnum = 6 // 交易失败
	TradeOrderStatusEnum_EVALUATED         TradeOrderStatusEnum = 7 // 已完成交易评价
)

// Enum value maps for TradeOrderStatusEnum.
var (
	TradeOrderStatusEnum_name = map[int32]string{
		0: "CREATE",
		1: "PAY",
		2: "DELIVERY_STARTED",
		3: "DELIVERY_FINISHED",
		4: "CLOSED",
		5: "SUCCESS",
		6: "FAIL",
		7: "EVALUATED",
	}
	TradeOrderStatusEnum_value = map[string]int32{
		"CREATE":            0,
		"PAY":               1,
		"DELIVERY_STARTED":  2,
		"DELIVERY_FINISHED": 3,
		"CLOSED":            4,
		"SUCCESS":           5,
		"FAIL":              6,
		"EVALUATED":         7,
	}
)

func (x TradeOrderStatusEnum) Enum() *TradeOrderStatusEnum {
	p := new(TradeOrderStatusEnum)
	*p = x
	return p
}

func (x TradeOrderStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeOrderStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[4].Descriptor()
}

func (TradeOrderStatusEnum) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[4]
}

func (x TradeOrderStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeOrderStatusEnum.Descriptor instead.
func (TradeOrderStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{4}
}

type PayType int32

const (
	PayType_INTERNAL PayType = 0 // DouTok余额支付
	PayType_ALIPAY   PayType = 1 // 支付宝支付
)

// Enum value maps for PayType.
var (
	PayType_name = map[int32]string{
		0: "INTERNAL",
		1: "ALIPAY",
	}
	PayType_value = map[string]int32{
		"INTERNAL": 0,
		"ALIPAY":   1,
	}
)

func (x PayType) Enum() *PayType {
	p := new(PayType)
	*p = x
	return p
}

func (x PayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[5].Descriptor()
}

func (PayType) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[5]
}

func (x PayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayType.Descriptor instead.
func (PayType) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{5}
}

type TradePromotionType int32

const (
	TradePromotionType_UNDEFINED_PT TradePromotionType = 0 // 未定义
	TradePromotionType_COUPON_PT    TradePromotionType = 1 // 优惠券
)

// Enum value maps for TradePromotionType.
var (
	TradePromotionType_name = map[int32]string{
		0: "UNDEFINED_PT",
		1: "COUPON_PT",
	}
	TradePromotionType_value = map[string]int32{
		"UNDEFINED_PT": 0,
		"COUPON_PT":    1,
	}
)

func (x TradePromotionType) Enum() *TradePromotionType {
	p := new(TradePromotionType)
	*p = x
	return p
}

func (x TradePromotionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradePromotionType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[6].Descriptor()
}

func (TradePromotionType) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[6]
}

func (x TradePromotionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradePromotionType.Descriptor instead.
func (TradePromotionType) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{6}
}

type DeliveryType int32

const (
	DeliveryType_UNDEFINED_DT DeliveryType = 0 // 未定义
	DeliveryType_MERCHANT_DT  DeliveryType = 1 // 商家发货
	DeliveryType_PLATFORM_DT  DeliveryType = 2 // 平台发货
	DeliveryType_BUYER_DT     DeliveryType = 3 // 买家自提
	DeliveryType_NONE_DT      DeliveryType = 4 // 无需发货
)

// Enum value maps for DeliveryType.
var (
	DeliveryType_name = map[int32]string{
		0: "UNDEFINED_DT",
		1: "MERCHANT_DT",
		2: "PLATFORM_DT",
		3: "BUYER_DT",
		4: "NONE_DT",
	}
	DeliveryType_value = map[string]int32{
		"UNDEFINED_DT": 0,
		"MERCHANT_DT":  1,
		"PLATFORM_DT":  2,
		"BUYER_DT":     3,
		"NONE_DT":      4,
	}
)

func (x DeliveryType) Enum() *DeliveryType {
	p := new(DeliveryType)
	*p = x
	return p
}

func (x DeliveryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[7].Descriptor()
}

func (DeliveryType) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[7]
}

func (x DeliveryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryType.Descriptor instead.
func (DeliveryType) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{7}
}

type DeliveryCompany int32

const (
	DeliveryCompany_UNDEFINED_DC DeliveryCompany = 0 // 未定义
	DeliveryCompany_SF_DC        DeliveryCompany = 1 // 顺丰
	DeliveryCompany_YTO_DC       DeliveryCompany = 2 // 圆通
	DeliveryCompany_ZTO_DC       DeliveryCompany = 3 // 中通
	DeliveryCompany_STO_DC       DeliveryCompany = 4 // 申通
	DeliveryCompany_YD_DC        DeliveryCompany = 5 // 韵达
	DeliveryCompany_EMS_DC       DeliveryCompany = 6 // EMS
	DeliveryCompany_JD_DC        DeliveryCompany = 7 // 京东
	DeliveryCompany_OTHER_DC     DeliveryCompany = 8 // 其他
)

// Enum value maps for DeliveryCompany.
var (
	DeliveryCompany_name = map[int32]string{
		0: "UNDEFINED_DC",
		1: "SF_DC",
		2: "YTO_DC",
		3: "ZTO_DC",
		4: "STO_DC",
		5: "YD_DC",
		6: "EMS_DC",
		7: "JD_DC",
		8: "OTHER_DC",
	}
	DeliveryCompany_value = map[string]int32{
		"UNDEFINED_DC": 0,
		"SF_DC":        1,
		"YTO_DC":       2,
		"ZTO_DC":       3,
		"STO_DC":       4,
		"YD_DC":        5,
		"EMS_DC":       6,
		"JD_DC":        7,
		"OTHER_DC":     8,
	}
)

func (x DeliveryCompany) Enum() *DeliveryCompany {
	p := new(DeliveryCompany)
	*p = x
	return p
}

func (x DeliveryCompany) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryCompany) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[8].Descriptor()
}

func (DeliveryCompany) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[8]
}

func (x DeliveryCompany) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryCompany.Descriptor instead.
func (DeliveryCompany) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{8}
}

type CloseType int32

const (
	CloseType_UNDEFINED_CT CloseType = 0 // 默认值
	CloseType_TIMEOUT_CT   CloseType = 1 // 超时关闭
	CloseType_BUYER_CT     CloseType = 2 // 买家关闭
	CloseType_SELLER_CT    CloseType = 3 // 卖家关闭
)

// Enum value maps for CloseType.
var (
	CloseType_name = map[int32]string{
		0: "UNDEFINED_CT",
		1: "TIMEOUT_CT",
		2: "BUYER_CT",
		3: "SELLER_CT",
	}
	CloseType_value = map[string]int32{
		"UNDEFINED_CT": 0,
		"TIMEOUT_CT":   1,
		"BUYER_CT":     2,
		"SELLER_CT":    3,
	}
)

func (x CloseType) Enum() *CloseType {
	p := new(CloseType)
	*p = x
	return p
}

func (x CloseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[9].Descriptor()
}

func (CloseType) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[9]
}

func (x CloseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloseType.Descriptor instead.
func (CloseType) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{9}
}

type PayScene int32

const (
	PayScene_NORMAL_PS PayScene = 0 // 正常支付
)

// Enum value maps for PayScene.
var (
	PayScene_name = map[int32]string{
		0: "NORMAL_PS",
	}
	PayScene_value = map[string]int32{
		"NORMAL_PS": 0,
	}
)

func (x PayScene) Enum() *PayScene {
	p := new(PayScene)
	*p = x
	return p
}

func (x PayScene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayScene) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[10].Descriptor()
}

func (PayScene) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[10]
}

func (x PayScene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayScene.Descriptor instead.
func (PayScene) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{10}
}

// 支付阶段
type PayPhase int32

const (
	PayPhase_NONE_PP    PayPhase = 0 // 一口价
	PayPhase_INITIAL_PP PayPhase = 1 // 初始化完成
	PayPhase_PAYING_PP  PayPhase = 2 // 支付中
	PayPhase_PAID_PP    PayPhase = 3 // 已支付
)

// Enum value maps for PayPhase.
var (
	PayPhase_name = map[int32]string{
		0: "NONE_PP",
		1: "INITIAL_PP",
		2: "PAYING_PP",
		3: "PAID_PP",
	}
	PayPhase_value = map[string]int32{
		"NONE_PP":    0,
		"INITIAL_PP": 1,
		"PAYING_PP":  2,
		"PAID_PP":    3,
	}
)

func (x PayPhase) Enum() *PayPhase {
	p := new(PayPhase)
	*p = x
	return p
}

func (x PayPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[11].Descriptor()
}

func (PayPhase) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[11]
}

func (x PayPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayPhase.Descriptor instead.
func (PayPhase) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{11}
}

type PayChannel int32

const (
	PayChannel_UNDEFINED_PC PayChannel = 0 // 未定义
	PayChannel_ALIPAY_PC    PayChannel = 1 // 支付宝
	PayChannel_WECHAT_PC    PayChannel = 2 // 微信
	PayChannel_UNION_PC     PayChannel = 3 // 银联
	PayChannel_APPLE_PC     PayChannel = 4 // 苹果支付
	PayChannel_GOOGLE_PC    PayChannel = 5 // Google支付
	PayChannel_DOUTOK_PC    PayChannel = 6 // Dou币支付
)

// Enum value maps for PayChannel.
var (
	PayChannel_name = map[int32]string{
		0: "UNDEFINED_PC",
		1: "ALIPAY_PC",
		2: "WECHAT_PC",
		3: "UNION_PC",
		4: "APPLE_PC",
		5: "GOOGLE_PC",
		6: "DOUTOK_PC",
	}
	PayChannel_value = map[string]int32{
		"UNDEFINED_PC": 0,
		"ALIPAY_PC":    1,
		"WECHAT_PC":    2,
		"UNION_PC":     3,
		"APPLE_PC":     4,
		"GOOGLE_PC":    5,
		"DOUTOK_PC":    6,
	}
)

func (x PayChannel) Enum() *PayChannel {
	p := new(PayChannel)
	*p = x
	return p
}

func (x PayChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[12].Descriptor()
}

func (PayChannel) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[12]
}

func (x PayChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayChannel.Descriptor instead.
func (PayChannel) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{12}
}

type PayStatus int32

const (
	PayStatus_INITIAL_PS PayStatus = 0 // 未支付
	PayStatus_PAYING_PS  PayStatus = 1 // 支付中
	PayStatus_PAID_PS    PayStatus = 2 // 已支付
	PayStatus_CLOSED_PS  PayStatus = 3 // 已关闭
)

// Enum value maps for PayStatus.
var (
	PayStatus_name = map[int32]string{
		0: "INITIAL_PS",
		1: "PAYING_PS",
		2: "PAID_PS",
		3: "CLOSED_PS",
	}
	PayStatus_value = map[string]int32{
		"INITIAL_PS": 0,
		"PAYING_PS":  1,
		"PAID_PS":    2,
		"CLOSED_PS":  3,
	}
)

func (x PayStatus) Enum() *PayStatus {
	p := new(PayStatus)
	*p = x
	return p
}

func (x PayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[13].Descriptor()
}

func (PayStatus) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[13]
}

func (x PayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayStatus.Descriptor instead.
func (PayStatus) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{13}
}

type TradeOrderRelation int32

const (
	TradeOrderRelation_ORIGIN_TOR TradeOrderRelation = 0 // 原始交易单
	TradeOrderRelation_RENEW_TOR  TradeOrderRelation = 1 // 续单
	TradeOrderRelation_TIED_TOR   TradeOrderRelation = 2 // 捆绑单
)

// Enum value maps for TradeOrderRelation.
var (
	TradeOrderRelation_name = map[int32]string{
		0: "ORIGIN_TOR",
		1: "RENEW_TOR",
		2: "TIED_TOR",
	}
	TradeOrderRelation_value = map[string]int32{
		"ORIGIN_TOR": 0,
		"RENEW_TOR":  1,
		"TIED_TOR":   2,
	}
)

func (x TradeOrderRelation) Enum() *TradeOrderRelation {
	p := new(TradeOrderRelation)
	*p = x
	return p
}

func (x TradeOrderRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeOrderRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[14].Descriptor()
}

func (TradeOrderRelation) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[14]
}

func (x TradeOrderRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeOrderRelation.Descriptor instead.
func (TradeOrderRelation) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{14}
}

type RefundOrderType int32

const (
	RefundOrderType_UNDEFINED_ROT     RefundOrderType = 0 // 未定义
	RefundOrderType_BUYER_CANCEL_ROT  RefundOrderType = 1 // 买家退款
	RefundOrderType_SELLER_CANCEL_ROT RefundOrderType = 2 // 卖家退款
)

// Enum value maps for RefundOrderType.
var (
	RefundOrderType_name = map[int32]string{
		0: "UNDEFINED_ROT",
		1: "BUYER_CANCEL_ROT",
		2: "SELLER_CANCEL_ROT",
	}
	RefundOrderType_value = map[string]int32{
		"UNDEFINED_ROT":     0,
		"BUYER_CANCEL_ROT":  1,
		"SELLER_CANCEL_ROT": 2,
	}
)

func (x RefundOrderType) Enum() *RefundOrderType {
	p := new(RefundOrderType)
	*p = x
	return p
}

func (x RefundOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefundOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[15].Descriptor()
}

func (RefundOrderType) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[15]
}

func (x RefundOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefundOrderType.Descriptor instead.
func (RefundOrderType) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{15}
}

type RefundOrderStatus int32

const (
	RefundOrderStatus_CREATE_ROS RefundOrderStatus = 0 // 已创建
	RefundOrderStatus_REFUND_ROS RefundOrderStatus = 1 // 已退款
	RefundOrderStatus_CLOSED_ROS RefundOrderStatus = 2 // 已关闭
)

// Enum value maps for RefundOrderStatus.
var (
	RefundOrderStatus_name = map[int32]string{
		0: "CREATE_ROS",
		1: "REFUND_ROS",
		2: "CLOSED_ROS",
	}
	RefundOrderStatus_value = map[string]int32{
		"CREATE_ROS": 0,
		"REFUND_ROS": 1,
		"CLOSED_ROS": 2,
	}
)

func (x RefundOrderStatus) Enum() *RefundOrderStatus {
	p := new(RefundOrderStatus)
	*p = x
	return p
}

func (x RefundOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefundOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_entities_proto_enumTypes[16].Descriptor()
}

func (RefundOrderStatus) Type() protoreflect.EnumType {
	return &file_trade_entities_proto_enumTypes[16]
}

func (x RefundOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefundOrderStatus.Descriptor instead.
func (RefundOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{16}
}

// 交易参与人信息
type TradeParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // 账户id
}

func (x *TradeParticipant) Reset() {
	*x = TradeParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_entities_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeParticipant) ProtoMessage() {}

func (x *TradeParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_trade_entities_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeParticipant.ProtoReflect.Descriptor instead.
func (*TradeParticipant) Descriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{0}
}

func (x *TradeParticipant) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

type TradePromotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromotionId     int64              `protobuf:"varint,1,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"`                                   // 优惠id
	PromotionName   string             `protobuf:"bytes,2,opt,name=promotion_name,json=promotionName,proto3" json:"promotion_name,omitempty"`                              // 优惠名称
	PromotionAmount uint64             `protobuf:"varint,3,opt,name=promotion_amount,json=promotionAmount,proto3" json:"promotion_amount,omitempty"`                       // 优惠金额 单位：分
	Decrption       string             `protobuf:"bytes,4,opt,name=decrption,proto3" json:"decrption,omitempty"`                                                           // 描述
	PromotionType   TradePromotionType `protobuf:"varint,5,opt,name=promotion_type,json=promotionType,proto3,enum=api.TradePromotionType" json:"promotion_type,omitempty"` // 优惠类型
	EntryId         int64              `protobuf:"varint,6,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`                                               // 优惠总类id
	AccountId       int64              `protobuf:"varint,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                         // 所属账户id
}

func (x *TradePromotion) Reset() {
	*x = TradePromotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_entities_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePromotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePromotion) ProtoMessage() {}

func (x *TradePromotion) ProtoReflect() protoreflect.Message {
	mi := &file_trade_entities_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePromotion.ProtoReflect.Descriptor instead.
func (*TradePromotion) Descriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{1}
}

func (x *TradePromotion) GetPromotionId() int64 {
	if x != nil {
		return x.PromotionId
	}
	return 0
}

func (x *TradePromotion) GetPromotionName() string {
	if x != nil {
		return x.PromotionName
	}
	return ""
}

func (x *TradePromotion) GetPromotionAmount() uint64 {
	if x != nil {
		return x.PromotionAmount
	}
	return 0
}

func (x *TradePromotion) GetDecrption() string {
	if x != nil {
		return x.Decrption
	}
	return ""
}

func (x *TradePromotion) GetPromotionType() TradePromotionType {
	if x != nil {
		return x.PromotionType
	}
	return TradePromotionType_UNDEFINED_PT
}

func (x *TradePromotion) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *TradePromotion) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

type DeliveryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryType    DeliveryType      `protobuf:"varint,1,opt,name=delivery_type,json=deliveryType,proto3,enum=api.DeliveryType" json:"delivery_type,omitempty"`                                // 发货类型
	DeliveryCompany DeliveryCompany   `protobuf:"varint,2,opt,name=delivery_company,json=deliveryCompany,proto3,enum=api.DeliveryCompany" json:"delivery_company,omitempty"`                    // 快递公司
	DeliveryNo      string            `protobuf:"bytes,3,opt,name=delivery_no,json=deliveryNo,proto3" json:"delivery_no,omitempty"`                                                             // 快递单号
	Id              int64             `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                                                              // 发货信息id
	ReceiverName    string            `protobuf:"bytes,5,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`                                                       // 收货人姓名
	ReceiverMobile  string            `protobuf:"bytes,6,opt,name=receiver_mobile,json=receiverMobile,proto3" json:"receiver_mobile,omitempty"`                                                 // 收货人手机号
	ReceiverAddress string            `protobuf:"bytes,7,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`                                              // 收货人地址
	Extra           map[string]string `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
}

func (x *DeliveryInfo) Reset() {
	*x = DeliveryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_entities_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryInfo) ProtoMessage() {}

func (x *DeliveryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trade_entities_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryInfo.ProtoReflect.Descriptor instead.
func (*DeliveryInfo) Descriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{2}
}

func (x *DeliveryInfo) GetDeliveryType() DeliveryType {
	if x != nil {
		return x.DeliveryType
	}
	return DeliveryType_UNDEFINED_DT
}

func (x *DeliveryInfo) GetDeliveryCompany() DeliveryCompany {
	if x != nil {
		return x.DeliveryCompany
	}
	return DeliveryCompany_UNDEFINED_DC
}

func (x *DeliveryInfo) GetDeliveryNo() string {
	if x != nil {
		return x.DeliveryNo
	}
	return ""
}

func (x *DeliveryInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliveryInfo) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *DeliveryInfo) GetReceiverMobile() string {
	if x != nil {
		return x.ReceiverMobile
	}
	return ""
}

func (x *DeliveryInfo) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *DeliveryInfo) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimeoutInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectTimeOut int64 `protobuf:"varint,1,opt,name=expect_time_out,json=expectTimeOut,proto3" json:"expect_time_out,omitempty"` // 预计超时时间
	ActualTimeOut int64 `protobuf:"varint,2,opt,name=actual_time_out,json=actualTimeOut,proto3" json:"actual_time_out,omitempty"` // 实际超时时间
	Executed      bool  `protobuf:"varint,3,opt,name=executed,proto3" json:"executed,omitempty"`                                  // 是否已执行超时后操作
}

func (x *TimeoutInfo) Reset() {
	*x = TimeoutInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_entities_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutInfo) ProtoMessage() {}

func (x *TimeoutInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trade_entities_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutInfo.ProtoReflect.Descriptor instead.
func (*TimeoutInfo) Descriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{3}
}

func (x *TimeoutInfo) GetExpectTimeOut() int64 {
	if x != nil {
		return x.ExpectTimeOut
	}
	return 0
}

func (x *TimeoutInfo) GetActualTimeOut() int64 {
	if x != nil {
		return x.ActualTimeOut
	}
	return 0
}

func (x *TimeoutInfo) GetExecuted() bool {
	if x != nil {
		return x.Executed
	}
	return false
}

type PaymentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                       // 支付信息id
	OrderId     int64      `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                              // 所属交易单id
	PaymentNo   string     `protobuf:"bytes,3,opt,name=payment_no,json=paymentNo,proto3" json:"payment_no,omitempty"`                         // 外部平台支付单号
	PayScene    PayScene   `protobuf:"varint,4,opt,name=pay_scene,json=payScene,proto3,enum=api.PayScene" json:"pay_scene,omitempty"`         // 支付场景
	PaidAmount  uint64     `protobuf:"varint,5,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`                     // 支付金额 单位：分
	PayPhase    PayPhase   `protobuf:"varint,6,opt,name=pay_phase,json=payPhase,proto3,enum=api.PayPhase" json:"pay_phase,omitempty"`         // 支付阶段
	PayChannel  PayChannel `protobuf:"varint,7,opt,name=pay_channel,json=payChannel,proto3,enum=api.PayChannel" json:"pay_channel,omitempty"` // 支付渠道
	PayStatus   PayStatus  `protobuf:"varint,8,opt,name=pay_status,json=payStatus,proto3,enum=api.PayStatus" json:"pay_status,omitempty"`     // 支付状态
	CreateTime  int64      `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                     // 创建时间
	PayTime     int64      `protobuf:"varint,10,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`                             // 支付时间
	CloseTime   int64      `protobuf:"varint,11,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`                       // 关闭时间
	SuccessTime int64      `protobuf:"varint,12,opt,name=success_time,json=successTime,proto3" json:"success_time,omitempty"`                 // 成功时间
	UpdateTime  int64      `protobuf:"varint,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                    // 更新时间
}

func (x *PaymentInfo) Reset() {
	*x = PaymentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_entities_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentInfo) ProtoMessage() {}

func (x *PaymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trade_entities_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentInfo.ProtoReflect.Descriptor instead.
func (*PaymentInfo) Descriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{4}
}

func (x *PaymentInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaymentInfo) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *PaymentInfo) GetPaymentNo() string {
	if x != nil {
		return x.PaymentNo
	}
	return ""
}

func (x *PaymentInfo) GetPayScene() PayScene {
	if x != nil {
		return x.PayScene
	}
	return PayScene_NORMAL_PS
}

func (x *PaymentInfo) GetPaidAmount() uint64 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *PaymentInfo) GetPayPhase() PayPhase {
	if x != nil {
		return x.PayPhase
	}
	return PayPhase_NONE_PP
}

func (x *PaymentInfo) GetPayChannel() PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return PayChannel_UNDEFINED_PC
}

func (x *PaymentInfo) GetPayStatus() PayStatus {
	if x != nil {
		return x.PayStatus
	}
	return PayStatus_INITIAL_PS
}

func (x *PaymentInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PaymentInfo) GetPayTime() int64 {
	if x != nil {
		return x.PayTime
	}
	return 0
}

func (x *PaymentInfo) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *PaymentInfo) GetSuccessTime() int64 {
	if x != nil {
		return x.SuccessTime
	}
	return 0
}

func (x *PaymentInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 退款单
type RefundOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundId     int64             `protobuf:"varint,1,opt,name=refund_id,json=refundId,proto3" json:"refund_id,omitempty"`                                         // 退款单id
	OrderId      int64             `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                            // 交易单id
	PaymentId    int64             `protobuf:"varint,3,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`                                      // 支付信息id
	RefundAmount int64             `protobuf:"varint,4,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`                             // 退款金额 单位：分
	RefundTime   int64             `protobuf:"varint,5,opt,name=refund_time,json=refundTime,proto3" json:"refund_time,omitempty"`                                   // 退款时间
	CreateTime   int64             `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                   // 创建时间
	UpdateTime   int64             `protobuf:"varint,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                   // 更新时间
	CloseTime    int64             `protobuf:"varint,8,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`                                      // 关闭时间
	RefundReason string            `protobuf:"bytes,9,opt,name=refund_reason,json=refundReason,proto3" json:"refund_reason,omitempty"`                              // 退款原因
	RefundType   RefundOrderType   `protobuf:"varint,10,opt,name=refund_type,json=refundType,proto3,enum=api.RefundOrderType" json:"refund_type,omitempty"`         // 退款类型
	RefundStatus RefundOrderStatus `protobuf:"varint,11,opt,name=refund_status,json=refundStatus,proto3,enum=api.RefundOrderStatus" json:"refund_status,omitempty"` // 退款状态
}

func (x *RefundOrder) Reset() {
	*x = RefundOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_entities_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOrder) ProtoMessage() {}

func (x *RefundOrder) ProtoReflect() protoreflect.Message {
	mi := &file_trade_entities_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOrder.ProtoReflect.Descriptor instead.
func (*RefundOrder) Descriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{5}
}

func (x *RefundOrder) GetRefundId() int64 {
	if x != nil {
		return x.RefundId
	}
	return 0
}

func (x *RefundOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *RefundOrder) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *RefundOrder) GetRefundAmount() int64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *RefundOrder) GetRefundTime() int64 {
	if x != nil {
		return x.RefundTime
	}
	return 0
}

func (x *RefundOrder) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RefundOrder) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *RefundOrder) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *RefundOrder) GetRefundReason() string {
	if x != nil {
		return x.RefundReason
	}
	return ""
}

func (x *RefundOrder) GetRefundType() RefundOrderType {
	if x != nil {
		return x.RefundType
	}
	return RefundOrderType_UNDEFINED_ROT
}

func (x *RefundOrder) GetRefundStatus() RefundOrderStatus {
	if x != nil {
		return x.RefundStatus
	}
	return RefundOrderStatus_CREATE_ROS
}

// 交易单
type TradeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId            int64                `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                      // 交易单id
	BizType            TradeBizType         `protobuf:"varint,2,opt,name=biz_type,json=bizType,proto3,enum=api.TradeBizType" json:"biz_type,omitempty"`                                                // 业务类型
	SaleWay            TradeSaleWay         `protobuf:"varint,3,opt,name=sale_way,json=saleWay,proto3,enum=api.TradeSaleWay" json:"sale_way,omitempty"`                                                // 销售方式
	PaySequence        TradePaySequence     `protobuf:"varint,4,opt,name=pay_sequence,json=paySequence,proto3,enum=api.TradePaySequence" json:"pay_sequence,omitempty"`                                // 支付顺序
	GoodsType          TradeGoodsType       `protobuf:"varint,5,opt,name=goods_type,json=goodsType,proto3,enum=api.TradeGoodsType" json:"goods_type,omitempty"`                                        // 商品类型
	OrderStatus        TradeOrderStatusEnum `protobuf:"varint,6,opt,name=order_status,json=orderStatus,proto3,enum=api.TradeOrderStatusEnum" json:"order_status,omitempty"`                            // 交易单状态
	BizStatus          int64                `protobuf:"varint,7,opt,name=biz_status,json=bizStatus,proto3" json:"biz_status,omitempty"`                                                                // 业务状态（具体业务自定义）
	BizOrderNo         string               `protobuf:"bytes,8,opt,name=biz_order_no,json=bizOrderNo,proto3" json:"biz_order_no,omitempty"`                                                            // 业务订单号
	BizId              int64                `protobuf:"varint,9,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`                                                                            // 业务id
	Buyer              *TradeParticipant    `protobuf:"bytes,10,opt,name=buyer,proto3" json:"buyer,omitempty"`                                                                                         // 买家信息
	Seller             *TradeParticipant    `protobuf:"bytes,11,opt,name=seller,proto3" json:"seller,omitempty"`                                                                                       // 卖家信息
	PayType            PayType              `protobuf:"varint,12,opt,name=pay_type,json=payType,proto3,enum=api.PayType" json:"pay_type,omitempty"`                                                    // 支付类型
	PayableAmount      uint64               `protobuf:"varint,13,opt,name=payable_amount,json=payableAmount,proto3" json:"payable_amount,omitempty"`                                                   // 应支付金额 单位：分
	PaidAmount         uint64               `protobuf:"varint,14,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`                                                            // 已支付金额 单位：分
	PromotionAmount    uint64               `protobuf:"varint,15,opt,name=promotion_amount,json=promotionAmount,proto3" json:"promotion_amount,omitempty"`                                             // 优惠金额 单位：分
	Promotions         []*TradePromotion    `protobuf:"bytes,16,rep,name=promotions,proto3" json:"promotions,omitempty"`                                                                               // 优惠信息
	DeliveryInfo       *DeliveryInfo        `protobuf:"bytes,17,opt,name=delivery_info,json=deliveryInfo,proto3" json:"delivery_info,omitempty"`                                                       // 发货信息
	CreateTime         int64                `protobuf:"varint,18,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                            // 创建时间
	PayTime            int64                `protobuf:"varint,19,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`                                                                     // 支付时间
	DeliveryTime       int64                `protobuf:"varint,20,opt,name=delivery_time,json=deliveryTime,proto3" json:"delivery_time,omitempty"`                                                      // 发货时间
	CloseTime          int64                `protobuf:"varint,21,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`                                                               // 关闭时间
	TimeoutInfo        *TimeoutInfo         `protobuf:"bytes,22,opt,name=timeout_info,json=timeoutInfo,proto3" json:"timeout_info,omitempty"`                                                          // 超时信息
	CloseType          CloseType            `protobuf:"varint,23,opt,name=close_type,json=closeType,proto3,enum=api.CloseType" json:"close_type,omitempty"`                                            // 关闭类型
	CloseReason        string               `protobuf:"bytes,24,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"`                                                          // 关闭原因
	SubOrder           []*TradeOrder        `protobuf:"bytes,25,rep,name=sub_order,json=subOrder,proto3" json:"sub_order,omitempty"`                                                                   // 子订单
	Payments           []*PaymentInfo       `protobuf:"bytes,26,rep,name=payments,proto3" json:"payments,omitempty"`                                                                                   // 支付信息
	Extra              map[string]string    `protobuf:"bytes,27,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
	TradeOrderRelation TradeOrderRelation   `protobuf:"varint,28,opt,name=trade_order_relation,json=tradeOrderRelation,proto3,enum=api.TradeOrderRelation" json:"trade_order_relation,omitempty"`      // 关系类型; 是sub order才有
	OriginOrderId      int64                `protobuf:"varint,29,opt,name=origin_order_id,json=originOrderId,proto3" json:"origin_order_id,omitempty"`                                                 // 原始交易单id; 是sub order才有
	Refunds            []*RefundOrder       `protobuf:"bytes,30,rep,name=refunds,proto3" json:"refunds,omitempty"`                                                                                     // 退款单
}

func (x *TradeOrder) Reset() {
	*x = TradeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_entities_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeOrder) ProtoMessage() {}

func (x *TradeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_trade_entities_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeOrder.ProtoReflect.Descriptor instead.
func (*TradeOrder) Descriptor() ([]byte, []int) {
	return file_trade_entities_proto_rawDescGZIP(), []int{6}
}

func (x *TradeOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *TradeOrder) GetBizType() TradeBizType {
	if x != nil {
		return x.BizType
	}
	return TradeBizType_DEFAULT_BT
}

func (x *TradeOrder) GetSaleWay() TradeSaleWay {
	if x != nil {
		return x.SaleWay
	}
	return TradeSaleWay_DEFAULT_SW
}

func (x *TradeOrder) GetPaySequence() TradePaySequence {
	if x != nil {
		return x.PaySequence
	}
	return TradePaySequence_PAY_FIRST
}

func (x *TradeOrder) GetGoodsType() TradeGoodsType {
	if x != nil {
		return x.GoodsType
	}
	return TradeGoodsType_DEFAULT_GT
}

func (x *TradeOrder) GetOrderStatus() TradeOrderStatusEnum {
	if x != nil {
		return x.OrderStatus
	}
	return TradeOrderStatusEnum_CREATE
}

func (x *TradeOrder) GetBizStatus() int64 {
	if x != nil {
		return x.BizStatus
	}
	return 0
}

func (x *TradeOrder) GetBizOrderNo() string {
	if x != nil {
		return x.BizOrderNo
	}
	return ""
}

func (x *TradeOrder) GetBizId() int64 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *TradeOrder) GetBuyer() *TradeParticipant {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *TradeOrder) GetSeller() *TradeParticipant {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *TradeOrder) GetPayType() PayType {
	if x != nil {
		return x.PayType
	}
	return PayType_INTERNAL
}

func (x *TradeOrder) GetPayableAmount() uint64 {
	if x != nil {
		return x.PayableAmount
	}
	return 0
}

func (x *TradeOrder) GetPaidAmount() uint64 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *TradeOrder) GetPromotionAmount() uint64 {
	if x != nil {
		return x.PromotionAmount
	}
	return 0
}

func (x *TradeOrder) GetPromotions() []*TradePromotion {
	if x != nil {
		return x.Promotions
	}
	return nil
}

func (x *TradeOrder) GetDeliveryInfo() *DeliveryInfo {
	if x != nil {
		return x.DeliveryInfo
	}
	return nil
}

func (x *TradeOrder) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TradeOrder) GetPayTime() int64 {
	if x != nil {
		return x.PayTime
	}
	return 0
}

func (x *TradeOrder) GetDeliveryTime() int64 {
	if x != nil {
		return x.DeliveryTime
	}
	return 0
}

func (x *TradeOrder) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *TradeOrder) GetTimeoutInfo() *TimeoutInfo {
	if x != nil {
		return x.TimeoutInfo
	}
	return nil
}

func (x *TradeOrder) GetCloseType() CloseType {
	if x != nil {
		return x.CloseType
	}
	return CloseType_UNDEFINED_CT
}

func (x *TradeOrder) GetCloseReason() string {
	if x != nil {
		return x.CloseReason
	}
	return ""
}

func (x *TradeOrder) GetSubOrder() []*TradeOrder {
	if x != nil {
		return x.SubOrder
	}
	return nil
}

func (x *TradeOrder) GetPayments() []*PaymentInfo {
	if x != nil {
		return x.Payments
	}
	return nil
}

func (x *TradeOrder) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *TradeOrder) GetTradeOrderRelation() TradeOrderRelation {
	if x != nil {
		return x.TradeOrderRelation
	}
	return TradeOrderRelation_ORIGIN_TOR
}

func (x *TradeOrder) GetOriginOrderId() int64 {
	if x != nil {
		return x.OriginOrderId
	}
	return 0
}

func (x *TradeOrder) GetRefunds() []*RefundOrder {
	if x != nil {
		return x.Refunds
	}
	return nil
}

var File_trade_entities_proto protoreflect.FileDescriptor

var file_trade_entities_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x03, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a,
	0x0b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x22, 0xd0, 0x03, 0x0a, 0x0b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x0b,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xda, 0x0a, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x57, 0x61, 0x79, 0x52,
	0x07, 0x73, 0x61, 0x6c, 0x65, 0x57, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x7a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x7a, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x7a, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70,
	0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x49, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x43, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x54, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x42, 0x54, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f,
	0x42, 0x54, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x61, 0x6c,
	0x65, 0x57, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x57, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53,
	0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x53,
	0x57, 0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x59, 0x5f, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x59, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x10, 0x01, 0x2a, 0x4e, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x47, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x5f, 0x47, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x5f, 0x47, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f,
	0x47, 0x54, 0x10, 0x03, 0x2a, 0x8a, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x2a, 0x23, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c,
	0x49, 0x50, 0x41, 0x59, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x54, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x50, 0x54, 0x10, 0x01, 0x2a, 0x5d, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x44, 0x54, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x44, 0x54, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x44, 0x54, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x54, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x54, 0x10, 0x04, 0x2a, 0x82, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x44, 0x43,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x46, 0x5f, 0x44, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x59, 0x54, 0x4f, 0x5f, 0x44, 0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x5a, 0x54, 0x4f,
	0x5f, 0x44, 0x43, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x4f, 0x5f, 0x44, 0x43, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x59, 0x44, 0x5f, 0x44, 0x43, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x4d, 0x53, 0x5f, 0x44, 0x43, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x44, 0x5f, 0x44,
	0x43, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x43, 0x10,
	0x08, 0x2a, 0x4a, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x54, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x54, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x54, 0x10, 0x03, 0x2a, 0x19, 0x0a,
	0x08, 0x50, 0x61, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x5f, 0x50, 0x53, 0x10, 0x00, 0x2a, 0x43, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x50, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x50, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x50, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x50, 0x10, 0x03, 0x2a, 0x76, 0x0a,
	0x0a, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x43, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x4c, 0x49, 0x50, 0x41, 0x59, 0x5f, 0x50, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50,
	0x4c, 0x45, 0x5f, 0x50, 0x43, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
	0x45, 0x5f, 0x50, 0x43, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x55, 0x54, 0x4f, 0x4b,
	0x5f, 0x50, 0x43, 0x10, 0x06, 0x2a, 0x46, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x53,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x53, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x53, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x53, 0x10, 0x03, 0x2a, 0x41, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x5f, 0x54, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x52, 0x10, 0x02,
	0x2a, 0x51, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x52, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x4f,
	0x54, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x4f, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x46, 0x55,
	0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x5f, 0x52, 0x4f, 0x53, 0x10, 0x02, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x7a, 0x65, 0x6e, 0x69,
	0x74, 0x68, 0x2f, 0x44, 0x6f, 0x75, 0x54, 0x6f, 0x6b, 0x2f, 0x2e, 0x2e, 0x2e, 0x3b, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_entities_proto_rawDescOnce sync.Once
	file_trade_entities_proto_rawDescData = file_trade_entities_proto_rawDesc
)

func file_trade_entities_proto_rawDescGZIP() []byte {
	file_trade_entities_proto_rawDescOnce.Do(func() {
		file_trade_entities_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_entities_proto_rawDescData)
	})
	return file_trade_entities_proto_rawDescData
}

var file_trade_entities_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_trade_entities_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_trade_entities_proto_goTypes = []interface{}{
	(TradeBizType)(0),         // 0: api.TradeBizType
	(TradeSaleWay)(0),         // 1: api.TradeSaleWay
	(TradePaySequence)(0),     // 2: api.TradePaySequence
	(TradeGoodsType)(0),       // 3: api.TradeGoodsType
	(TradeOrderStatusEnum)(0), // 4: api.TradeOrderStatusEnum
	(PayType)(0),              // 5: api.PayType
	(TradePromotionType)(0),   // 6: api.TradePromotionType
	(DeliveryType)(0),         // 7: api.DeliveryType
	(DeliveryCompany)(0),      // 8: api.DeliveryCompany
	(CloseType)(0),            // 9: api.CloseType
	(PayScene)(0),             // 10: api.PayScene
	(PayPhase)(0),             // 11: api.PayPhase
	(PayChannel)(0),           // 12: api.PayChannel
	(PayStatus)(0),            // 13: api.PayStatus
	(TradeOrderRelation)(0),   // 14: api.TradeOrderRelation
	(RefundOrderType)(0),      // 15: api.RefundOrderType
	(RefundOrderStatus)(0),    // 16: api.RefundOrderStatus
	(*TradeParticipant)(nil),  // 17: api.TradeParticipant
	(*TradePromotion)(nil),    // 18: api.TradePromotion
	(*DeliveryInfo)(nil),      // 19: api.DeliveryInfo
	(*TimeoutInfo)(nil),       // 20: api.TimeoutInfo
	(*PaymentInfo)(nil),       // 21: api.PaymentInfo
	(*RefundOrder)(nil),       // 22: api.RefundOrder
	(*TradeOrder)(nil),        // 23: api.TradeOrder
	nil,                       // 24: api.DeliveryInfo.ExtraEntry
	nil,                       // 25: api.TradeOrder.ExtraEntry
}
var file_trade_entities_proto_depIdxs = []int32{
	6,  // 0: api.TradePromotion.promotion_type:type_name -> api.TradePromotionType
	7,  // 1: api.DeliveryInfo.delivery_type:type_name -> api.DeliveryType
	8,  // 2: api.DeliveryInfo.delivery_company:type_name -> api.DeliveryCompany
	24, // 3: api.DeliveryInfo.extra:type_name -> api.DeliveryInfo.ExtraEntry
	10, // 4: api.PaymentInfo.pay_scene:type_name -> api.PayScene
	11, // 5: api.PaymentInfo.pay_phase:type_name -> api.PayPhase
	12, // 6: api.PaymentInfo.pay_channel:type_name -> api.PayChannel
	13, // 7: api.PaymentInfo.pay_status:type_name -> api.PayStatus
	15, // 8: api.RefundOrder.refund_type:type_name -> api.RefundOrderType
	16, // 9: api.RefundOrder.refund_status:type_name -> api.RefundOrderStatus
	0,  // 10: api.TradeOrder.biz_type:type_name -> api.TradeBizType
	1,  // 11: api.TradeOrder.sale_way:type_name -> api.TradeSaleWay
	2,  // 12: api.TradeOrder.pay_sequence:type_name -> api.TradePaySequence
	3,  // 13: api.TradeOrder.goods_type:type_name -> api.TradeGoodsType
	4,  // 14: api.TradeOrder.order_status:type_name -> api.TradeOrderStatusEnum
	17, // 15: api.TradeOrder.buyer:type_name -> api.TradeParticipant
	17, // 16: api.TradeOrder.seller:type_name -> api.TradeParticipant
	5,  // 17: api.TradeOrder.pay_type:type_name -> api.PayType
	18, // 18: api.TradeOrder.promotions:type_name -> api.TradePromotion
	19, // 19: api.TradeOrder.delivery_info:type_name -> api.DeliveryInfo
	20, // 20: api.TradeOrder.timeout_info:type_name -> api.TimeoutInfo
	9,  // 21: api.TradeOrder.close_type:type_name -> api.CloseType
	23, // 22: api.TradeOrder.sub_order:type_name -> api.TradeOrder
	21, // 23: api.TradeOrder.payments:type_name -> api.PaymentInfo
	25, // 24: api.TradeOrder.extra:type_name -> api.TradeOrder.ExtraEntry
	14, // 25: api.TradeOrder.trade_order_relation:type_name -> api.TradeOrderRelation
	22, // 26: api.TradeOrder.refunds:type_name -> api.RefundOrder
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_trade_entities_proto_init() }
func file_trade_entities_proto_init() {
	if File_trade_entities_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_entities_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_entities_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePromotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_entities_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_entities_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_entities_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_entities_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_entities_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_entities_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_entities_proto_goTypes,
		DependencyIndexes: file_trade_entities_proto_depIdxs,
		EnumInfos:         file_trade_entities_proto_enumTypes,
		MessageInfos:      file_trade_entities_proto_msgTypes,
	}.Build()
	File_trade_entities_proto = out.File
	file_trade_entities_proto_rawDesc = nil
	file_trade_entities_proto_goTypes = nil
	file_trade_entities_proto_depIdxs = nil
}
